{"version":3,"sources":["assets/ProgSocLogo.png","Tag.js","Form.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","light","fontWeight","Tag","name","color","style","textAlign","Form","updateInput","e","setState","target","value","displayColor","preventDefault","prevState","displayColorSelect","hideColor","pickColor","tagMap","state","set","hex","addTag","tagText","has","firstTag","tags","Object","fromEntries","Map","noNameCol","removeTag","length","temp","pop","renderTags","map","tag","id","key","addEvent","firebase","firestore","collection","add","description","location","photo_url","photoUrl","start","Timestamp","fromDate","Date","startDate","summary","className","float","marginTop","onClick","this","props","logOut","src","logo","alt","width","height","onSubmit","htmlFor","required","type","onChange","rows","display","justifyContent","alignItems","paddingTop","paddingBottom","onChangeComplete","React","Component","copyStyle","fontSize","paddingRight","Footer","getFullYear","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useState","isLoggedIn","setLog","marginLeft","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb9d4cdf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ProgSocLogo.f0f3a878.png\";","import React from 'react'\n\nconst light = {\n    fontWeight: 'lighter'\n}\n\nfunction Tag({name, color}) {\n    return (\n        <div>\n            <h4 style={light}> name: <span style={{fontWeight:'normal'}}>{name}</span>, color: <span style={{fontWeight:'normal'}}>{color}</span></h4>\n        </div>\n    )\n}\n\nexport default Tag;","import React from 'react';\nimport firebase from 'firebase';\nimport logo from './assets/ProgSocLogo.png';\nimport { CirclePicker } from 'react-color';\nimport Tag from './Tag';\nimport './App.css';\n\nconst light = {\n    fontWeight: 'lighter',\n    textAlign: 'center'\n}\n\n\nclass Form extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            description: '',\n            location: '',\n            name: '',\n            photoUrl: '',\n            startDate: new Date(),\n            summary: '',\n            tagText: '',\n            tagMap: new Map(),\n            tags: [],\n            firstTag: true,\n            displayColorSelect: false,\n            noNameCol: false\n        }\n    }\n\n    // various handlers for changing state after buttons are clicked\n\n    updateInput = e => {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    displayColor = e => {\n        e.preventDefault();\n        this.setState(prevState => ({\n            displayColorSelect: !prevState.displayColorSelect\n        }))\n    }\n\n    hideColor = e => {\n        e.preventDefault();\n        this.setState({displayColorSelect: false})\n    }\n\n    pickColor = color => {\n        this.setState({tagMap: this.state.tagMap.set('color',color.hex)})\n    }\n\n    addTag = e => {\n        e.preventDefault();\n\n        if (this.state.tagText === '' ||Â !this.state.tagMap.has('color'))  {\n            this.setState({noNameCol: true})\n        } \n\n        else {\n\n            this.setState({firstTag: false})\n\n            this.setState(prevState => ({\n                tagMap: prevState.tagMap.set('name', this.state.tagText)\n            }))\n    \n            this.setState(prevState => ({\n                tags: [...prevState.tags, Object.fromEntries(this.state.tagMap)],\n                tagMap: new Map(),\n                tagText: '',\n                noNameCol: false\n            }))\n        }\n    }\n\n    removeTag = e => {\n        e.preventDefault();\n\n        if (this.state.tags.length > 0) {\n            let temp = [...this.state.tags]\n            temp.pop()\n            if (temp.length === 0) {\n                this.setState({firstTag: true})\n            }\n            this.setState({tags: temp})\n        } \n    }\n\n    renderTags = () => {\n        return this.state.tags.map((tag, id) => <Tag name={tag.name} color={tag.color} key={id}/>)\n    }\n\n    addEvent = e => {\n        e.preventDefault();\n        const db = firebase.firestore();\n        db.collection('events').add({\n            description: this.state.description,\n            location: this.state.location,\n            name: this.state.name,\n            photo_url: this.state.photoUrl,\n            start: firebase.firestore.Timestamp.fromDate(new Date(this.state.startDate)),\n            summary: this.state.summary,\n            tags: this.state.tags\n        });\n        this.setState({\n            description: '',\n            location: '',\n            name: '',\n            photoUrl: '',\n            startDate: new Date(),\n            summary: '',\n            tagText: '',\n            tagMap: new Map(),\n            tags: [],\n            firstTag: true,\n            displayColorSelect: false,\n            noNameCol: false\n        })\n    }\n\n    // renders the form\n\n    render() {\n        return (\n            <div className='inputDiv'>\n                <button className='coolButton' style={{float:'right', marginTop:'55px'}} onClick={this.props.logOut}>Log Out</button>\n                <h1 style={light}> <img src={logo} alt='progsoc-logo' width='100px' height='100px'/> Event Creator</h1>\n                <form onSubmit={this.addEvent}>\n                <div className='inputDiv'>\n                        <label className='required' htmlFor='name'>Name</label><br/>\n                        <input required name='name' type='text' \n                        onChange={this.updateInput} value={this.state.name}></input>\n                    </div>\n                    <div className='inputDiv'>\n                        <label className='required' htmlFor='description'>Description</label><br/>\n                        <textarea required name='description' type='text' rows='5'\n                        onChange={this.updateInput} value={this.state.description}></textarea>\n                    </div>\n                    <div className='inputDiv'>\n                        <label className='required' htmlFor='location'>Location</label><br/>\n                        <input required name='location' type='text' \n                        onChange={this.updateInput} value={this.state.location}></input>\n                    </div>\n                    <div className='inputDiv'>\n                        <label className='required' htmlFor='startDate'>Start Date</label><br/>\n                        <input required name='startDate' type='datetime-local' \n                        onChange={this.updateInput} value={this.state.startDate}></input>\n                    </div>\n                    <div className='inputDiv'>\n                        <label htmlFor='summary'>Summary</label><br/>\n                        <input name='summary' type='text' \n                        onChange={this.updateInput} value={this.state.summary}></input>\n                    </div>\n                    <div className='inputDiv'>\n                        <label htmlFor='photoUrl'>Photo URL</label><br/>\n                        <input name='photoUrl' type='url' \n                        onChange={this.updateInput} value={this.state.photoUrl}></input>\n                    </div>\n                    <div className='inputDiv'>\n                        <label htmlFor='tagText'>Tags</label><br/>\n                        <input name='tagText' type='text'  \n                        onChange={this.updateInput} value={this.state.tagText}></input>\n                        {this.state.noNameCol ? <h3 style={{fontWeight:'300', color:'red'}}>Tags need a name and colour!</h3> : null}\n                        {!this.state.firstTag ? <h2 style={light}>Your Tags</h2> : null}\n                        {this.state.tags.length >= 0 ? this.renderTags() : null}\n                        <button className='tagButton coolButton' onClick={this.displayColor}>Select Colour</button>\n                        {this.state.displayColorSelect ? \n                        <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", paddingTop: '20px', paddingBottom: '20px'}}>\n                            <CirclePicker onChangeComplete={this.pickColor}/></div> : null}\n                        <button className='tagButton coolButton' onClick={this.addTag}>Add Tag</button>\n                        <button className='tagButton coolButton' onClick={this.removeTag}>Remove Last Tag</button>\n                    </div>\n                    <button className='eventButton coolButton' type='submit'>Add Event</button>\n                </form>\n            </div>\n        )\n    }\n    \n}\n\nexport default Form;","import React from 'react';\n\nconst copyStyle = {\n    float: 'right',\n    fontSize: 'small',\n    paddingRight: '15px',\n    color: '#6c757d'\n}\n\nfunction Footer() {\n    return (\n        <p style={copyStyle}>&copy; {new Date().getFullYear()} EUPS </p>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport { useState } from 'react';\nimport Form from './Form';\nimport Footer from './Footer';\nimport * as firebase from 'firebase/app';\nimport './App.css';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAOYtNKsCiwjosXZEsS7Zw-vyrABepxZXQ\",\n  authDomain: \"prog-soc-site.firebaseapp.com\",\n  databaseURL: \"https://prog-soc-site.firebaseio.com\",\n  projectId: \"prog-soc-site\",\n  storageBucket: \"prog-soc-site.appspot.com\",\n  messagingSenderId: \"1050991347056\",\n  appId: \"1:1050991347056:web:e0a9a55f015c36c1c3bbb5\",\n  measurementId: \"G-MDS039HCQZ\"\n}\n\nfirebase.initializeApp(firebaseConfig);\n\nfunction App() {\n  const [isLoggedIn, setLog] = useState(false)\n\n  const signIn = () => {\n    // auth\n    setLog(true)\n  }\n\n  const logOut = () => {\n    setLog(false)\n  }\n\n  if (isLoggedIn) {\n    return (\n      <div>\n        <Form logOut={logOut}/>\n        <Footer/>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <button className='coolButton' style={{marginLeft:'45%', marginTop:'20px'}} onClick={signIn}>Sign In</button>\n      </div>\n    )\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}